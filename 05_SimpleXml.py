# -*- coding: utf-8 -*-
"""SimpleXml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19G9od3bWShiSB0RB-F5p1bTjgU9tqAEy
"""

import tensorflow as tf
import numpy as np # for multidimensional arrays

# Word index
word_index = {}
word_index["<PAD>"] = 0
# word_index["<START>"] = 1
word_index["<UNK>"] = 2  # unknown
# word_index["<UNUSED>"] = 3

word_index["."] = 4
word_index["validationxml"] = 5
word_index["document"] = 6
word_index["displayxml"] = 7
word_index["sheets"] = 8
word_index["sheet"] = 9
word_index["root"] = 10
word_index["node"] = 11
word_index["base"] = 12
word_index["dlitem"] = 13
word_index["member"] = 14
word_index["@X"] = 15
word_index["@Y"] = 16
word_index["@Z"] = 17

word_index

reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])

test_xml_1 = "8.014999/8.014540/./validationxml/document/displayxml/sheets/sheet/document/root/node/base/base/node/base/base/dlitem/dlitem/dlitem/dlitem/dlitem/dlitem/member/@Z"
test_xml_2 = "8.014999/8.014540/./validationxml/document/displayxml/sheets/sheet/document/root/node/base/base/node/base/base/dlitem/dlitem/dlitem/dlitem/dlitem/dlitem/member/@X"
test_xml_3 = "8.014999/8.014540/./validationxml/document/displayxml/sheets/sheet/document/root/base/base/node/base/base/dlitem/dlitem/dlitem/dlitem/dlitem/dlitem/member/@Z"
test_xml_4 = "8.014999/8.014540/./validationxml/document/displayxml/sheets/sheet/document/root/base/base/node/base/base/dlitem/dlitem/dlitem/dlitem/dlitem/dlitem/member/@X"

arr_1 = test_xml_1.split('/')
arr_1

# Convert each test xml array to values from 0.0-1.0
print(len(arr_1))
pads = [0] * (40 - len(arr_1))
print(len(pads))

word_values = []
for index, name in enumerate(arr_1):
  if index > 1: # skip baseline and compare values
    word_values.append(word_index[name])

word_values.extend(pads)
print(len(word_values))

np_word_values = np.array(word_values, dtype=np.uint8)
np_word_bits = np.unpackbits(np_word_values)
print(len(np_word_bits))

np_word_bits = np_word_bits.astype(float) # convert values to float
np_word_bits = np.insert(np_word_bits, 0, float(arr_1[1])/10.0) # hack for now
np_word_bits = np.insert(np_word_bits, 0, float(arr_1[0])/10.0) # hack for now
print(len(np_word_bits))
np_word_bits